rules_version = '2';

function isSignedIn() {
  return request.auth != null && request.auth.token.email != null;
}

function isAdmin() {
  return request.auth != null &&
    request.auth.token.email in [
      "mohitkmr8566@gmail.com",
      "warea.admin@gmail.com"
    ];
}

function isOwner(emailField) {
  return isSignedIn() && emailField == request.auth.token.email;
}

function isValidOrder() {
  return
    request.resource.data.keys().hasAll([
      'userId', 'customer', 'items', 'total', 'status', 'createdAt', 'payment'
    ]) &&

    // Must match logged-in user
    isOwner(request.resource.data.userId) &&

    // Items must be list and not empty
    (request.resource.data.items is list) &&
    (request.resource.data.items.size() > 0) &&

    // First item basic checks
    request.resource.data.items[0].keys().hasAll(['id','name','price','qty']) &&
    (request.resource.data.items[0].price is number) &&
    (request.resource.data.items[0].qty is number) &&

    // Total must be number
    (request.resource.data.total is number) &&

    // Payment structure: either COD or Saved Card
    (
      (request.resource.data.payment.type == 'COD') ||
      (
        request.resource.data.payment.type == 'SAVED_CARD' &&
        request.resource.data.payment.keys().hasAll(['type','methodId','card','name'])
      )
    );
}

service cloud.firestore {
  match /databases/{database}/documents {

    // ✅ PRODUCTS
    match /products/{productId} {
      // Public read
      allow read: if true;
      // Only admin can write
      allow write: if isAdmin();
    }

    // ✅ HERO SLIDES
    // NOTE: We fetch all slides then filter on the client.
    // So reads must be allowed for every document in the collection.
    match /heroSlides/{slideId} {
      allow read: if true;        // public read (required for client-side filtering)
      allow write: if isAdmin();  // only admin can create/update/delete
    }

    // ✅ ORDERS
    match /orders/{orderId} {
      // Admin: full read/write
      allow read, write: if isAdmin();

      // Customer: can read only their own orders
      allow read: if isSignedIn() && isOwner(resource.data.userId);

      // Customer: can place orders with valid structure
      allow create: if isValidOrder();

      // No updates/deletes from frontend for normal users
      allow update, delete: if false;
    }

    // ✅ USERS (addresses, payments, notifications)
    match /users/{userEmail} {
      allow read, create, update: if isOwner(userEmail);

      match /addresses/{addrId} {
        allow read, list, create, update, delete: if isOwner(userEmail);
      }

      match /paymentMethods/{pmId} {
        allow read, list, create, update, delete: if isOwner(userEmail);
      }

      match /notifications/{notifId} {
        allow read, list: if isOwner(userEmail);
        allow create: if isOwner(userEmail);
        allow update: if isOwner(userEmail);
        allow delete: if false;
      }
    }
  }
}
